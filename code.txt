11.登录注册-模块介绍

	目标

	- 能实现登录页面的布局
	- 能实现基本登录功能
	- 能掌握 Vant 中 Toast 提示组件的使用
	- 能理解 API 请求模块的封装
	- 能理解发送验证码的实现思路
	- 能理解 Vant Form 实现表单验证的使用

       管理员账号 13911111111  密码 246810
	


12.登录注册-准备-创建组件并配置路由


      创建组件并配置路由


          打开  src/App.vue

          修改如下

            <template>
			  <div id="app">
			    <router-view />
			  </div>
			</template>

			<script>
			export default {
			  name: "App",
			};
			</script>

			<style scoped lang="less">
			</style>




         1、创建 src/views/login/index.vue 并写入以下内容


            <template>
			  <div class="login-container">登录页面</div>
			</template>

			<script>
			export default {
			  name: 'LoginPage',
			  components: {},
			  props: {},
			  data () {
			    return {}
			  },
			  computed: {},
			  watch: {},
			  created () {},
			  mounted () {},
			  methods: {}
			}
			</script>

			<style scoped lang="less"></style>





        2、然后在 src/router/index.js 中配置登录页的路由表


        将 

        const routes = [
  
        ]


        改为

		const routes = [
		  {
		    path: '/login',
		    name: 'login',
		    component: () => import('@/views/login')
		  }
		]


        http://localhost:8080/#/login


             访问 `/login` 查看是否能访问到登录页面。


13.登录注册-准备-布局结构


      主要使用到三个 Vant 组件：

		- [NavBar 导航栏](https://youzan.github.io/vant/#/zh-CN/nav-bar)
		- [Form 表单](https://youzan.github.io/vant/#/zh-CN/form)
		  - [Field 输入框](https://youzan.github.io/vant/#/zh-CN/field)
		  - [Button 按钮](https://youzan.github.io/vant/#/zh-CN/button)

		一个经验：使用组件库中的现有组件快速布局，再慢慢调整细节，效率更高（刚开始可能会感觉有点麻烦，越用越熟，慢慢的就有了自己的思想）。


14.登录注册-准备-布局样式



      

        打开 src/styles/index.less

        加入

		.page-nav-bar {
		  background-color: #3296fa;
		  .van-nav-bar__title {
		    color: #fff;
		  }
		}


       打开   src/views/login/index.vue

       修改如下


       <template>
		  <div class="login-container">
		    <!-- 导航栏 -->
		    <van-nav-bar class="page-nav-bar" title="登录" />
		    <!-- /导航栏 -->

		    <!-- 登录表单 -->
		    <van-form @submit="onSubmit">
		      <van-field name="用户名" placeholder="请输入手机号">
		        <i slot="left-icon" class="toutiao toutiao-shouji"></i>
		      </van-field>
		      <van-field type="password" name="验证码" placeholder="请输入验证码">
		        <i slot="left-icon" class="toutiao toutiao-yanzhengma"></i>
		        <template #button>
		          <van-button class="send-sms-btn" round size="small" type="default"
		            >发送验证码</van-button
		          >
		        </template>
		      </van-field>
		      <div class="login-btn-wrap">
		        <van-button class="login-btn" block type="info" native-type="submit">
		          登录
		        </van-button>
		      </div>
		    </van-form>
		    <!-- /登录表单 -->
		  </div>
		</template>

		<script>
		export default {
		  name: "LoginIndex",
		  components: {},
		  props: {},
		  data() {
		    return {};
		  },
		  computed: {},
		  watch: {},
		  created() {},
		  mounted() {},
		  methods: {
		    onSubmit(values) {
		      console.log("submit", values);
		    }
		  }
		};
		</script>

		<style scoped lang="less">
		.login-container {
		  .toutiao {
		    font-size: 37px;
		  }
		  .send-sms-btn {
		    width: 152px;
		    height: 46px;
		    line-height: 46px;
		    background-color: #ededed;
		    font-size: 22px;
		    color: #666;
		  }
		  .login-btn-wrap {
		    padding: 53px 33px;
		    .login-btn {
		      background-color: #6db4fb;
		      border: none;
		    }
		  }
		}
		</style>



       http://localhost:8080/#/login



15.登录注册-实现基本登录功能

        思路：

        - 注册点击登录的事件
		- 获取表单数据（根据接口要求使用 v-model 绑定）
		- 表单验证
		- 发请求提交
		- 根据请求结果做下一步处理


		Token 是用户登录成功之后服务端返回的一个身份令牌，在项目中的多个业务中需要使用到：

		- 访问需要授权的 API 接口
		- 校验页面的访问权限
		- ...

		但是我们只有在第一次用户登录成功之后才能拿到 Token。

		所以为了能在其它模块中获取到 Token 数据，我们需要把它存储到一个公共的位置，方便随时取用。

		往哪儿存？

		- 本地存储
		  - 获取麻烦
		  - 数据不是响应式
		- Vuex 容器（推荐）
		  - 获取方便
		  - 响应式的


        使用容器存储 Token 的思路：


        - 登录成功，将 Token 存储到 Vuex 容器中
		  - 获取方便
		  - 响应式
		- 为了持久化，还需要把 Token 放到本地存储
		  - 持久化


		关于 Token 过期问题

		登录成功之后后端会返回两个 Token：

		- token：访问令牌，有效期2小时
		- refresh_token：刷新令牌，有效期14天，用于访问令牌过期之后重新获取新的访问令牌



		我们的项目接口中设定的 Token 有效期是 2 小时，超过有效期服务端会返回 401 表示 Token 无效或过期了。



		为什么过期时间这么短？

		- 为了安全，例如 Token 被别人盗用



		过期了怎么办？

		- ~~让用户重新登录~~，用户体验太差了
		- 使用 refresh_token 解决 token 过期



		如何使用 refresh_token 解决 token 过期？

		> 到课程的后面我们开发的业务功能丰富起来之后，再给大家讲解 Token 过期处理。
		>
		> 大家需要注意的是在学习测试的时候如果收到 401 响应码，请重新登录再测试。


		概述：服务器生成token的过程中，会有两个时间，一个是token失效时间，一个是token刷新时间，刷新时间肯定比失效时间长，当用户的 `token` 过期时，你可以拿着过期的token去换取新的token，来保持用户的登陆状态，当然你这个过期token的过期时间必须在刷新时间之内，如果超出了刷新时间，那么返回的依旧是 401。

		处理流程：

		1. 在axios的拦截器中加入token刷新逻辑
		2. 当用户token过期时，去向服务器请求新的 token
		3. 把旧的token替换为新的token
		4. 然后继续用户当前的请求



		查看接口  用户  --- 用户认证（登录注册）


		创建 src/api/user.js 封装请求方法

		加入

		/**
		 * 用户相关的请求模块
		 */
		import request from "@/utils/request"

		/**
		 * 用户登录
		 */
		export const login = data => {
		  return request({
		    method: 'POST',
		    url: '/app/v1_0/authorizations',
		    data
		  })
		}





		打开   src/views/login/index.vue

		将


		  data() {
		    return {};
		  }

		改为

		 data () {
		  return {
		    user: {
		      mobile: '',
		      code: ''
		    }
		  }
		}


       将  <van-field name="用户名" placeholder="请输入手机号">

       改为   

       <van-field
	    v-model="user.mobile"
	    required
	    clearable
	    label="手机号"
	    placeholder="请输入手机号"
	  />

	  将  <van-field type="password" name="验证码" placeholder="请输入验证码">

	  改为 


	      <van-field
		    v-model="user.code"
		    type="number"
		    label="验证码"
		    placeholder="请输入验证码"
		    required
		  />


         
       最后测试。

            一个小技巧：使用 VueDevtools 调试工具查看是否绑定成功。

		

16.登录注册-登录状态提示
17.登录注册-表单验证
18.登录注册-发送验证码-验证手机号
19.登录注册-发送验证码-使用倒计时组件
20.登录注册-验证码处理-发送验证码
21.登录注册-处理用户Token
22.登录注册-封装本地存储操作模块
23.登录注册-关于Token过期问题

     打开   src/api/user.js

     加入

         /**
		 * 发送验证码
		 * 注意：每手机号每分钟1次
		 */
		export const sendSms = mobile => {
		  return request({
		    method: 'GET',
		    url: `/app/v1_0/sms/codes/${mobile}`
		  })
		}

		/**
		 * 获取用户自己的信息
		 */
		export const getUserInfo = () => {
		  return request({
		    method: 'GET',
		    url: '/app/v1_0/user'
		    // 发送请求头数据
		    // headers: {
		    //   // 注意：该接口需要授权才能访问
		    //   //       token的数据格式：Bearer token数据，注意 Bearer 后面有个空格
		    //   Authorization: `Bearer ${store.state.user.token}`
		    // }
		  })
		}

		右键  src/utils  ---  new  file  name:  storage.js

		加入


		/**
		 * 封装本地存储操作模块
		 */

		/**
		 * 存储数据
		 */
		export const setItem = (key, value) => {
		  // 将数组、对象类型的数据转换为 JSON 格式字符串进行存储
		  if (typeof value === 'object') {
		    value = JSON.stringify(value)
		  }
		  window.localStorage.setItem(key, value)
		}

		/**
		 * 获取数据
		 */
		export const getItem = key => {
		  const data = window.localStorage.getItem(key)
		  try {
		    return JSON.parse(data)
		  } catch (err) {
		    return data
		  }
		}

		/**
		 * 删除数据
		 */
		export const removeItem = key => {
		  window.localStorage.removeItem(key)
		}


		打开  src/utils/request.js

		加入  import store from '@/store'


		再加入

        // https://github.com/axios/axios#interceptors
		// 请求拦截器
		// Add a request interceptor
		request.interceptors.request.use(function (config) {
		  // 请求发起会经过这里
		  // config：本次请求的请求配置对象
		  const { user } = store.state
		  if (user && user.token) {
		    config.headers.Authorization = `Bearer ${user.token}`
		  }

		  // 注意：这里务必要返回 config 配置对象，否则请求就停在这里出不去了
		  return config
		}, function (error) {
		  // 如果请求出错了（还没有发出去）会进入这里
		  return Promise.reject(error)
		})

		// 响应拦截器



		打开   src/store/index.js

		加入 

		import { getItem, setItem } from '@/utils/storage'
        const TOKEN_KEY = 'TOUTIAO_USER'

        将 

          state: {
		  },
		  mutations: {
		  }

		改为

		      state: {
			    // 一个对象，存储当前登录用户信息（token等数据）
			    user: getItem(TOKEN_KEY)
			    // user: JSON.parse(window.localStorage.getItem(TOKEN_KEY))
			    // user: null
			  },
			  mutations: {
			    setUser (state, data) {
			      state.user = data

			      // 为了防止刷新丢失，我们需要把数据备份到本地存储
			      setItem(TOKEN_KEY, state.user)
			      // window.localStorage.setItem(TOKEN_KEY, JSON.stringify(state.user))
			    }
			  }



         打开   src/views/login/index.vue

         修改代码如下

         <template>
		  <div class="login-container">
		    <!-- 导航栏 -->
		    <van-nav-bar
		      class="page-nav-bar"
		      title="登录"
		    >
		      <van-icon
		        slot="left"
		        name="cross"
		        @click="$router.back()"
		      />
		    </van-nav-bar>
		    <!-- /导航栏 -->

		    <!-- 登录表单 -->
		    <!--
		      表单验证：
		        1、给 van-field 组件配置 rules 验证规则
		          参考文档：https://youzan.github.io/vant/#/zh-CN/form#rule-shu-ju-jie-gou
		        2、当表单提交的时候会自动触发表单验证
		           如果验证通过，会触发 submit 事件
		           如果验证失败，不会触发 submit
		     -->
		    <van-form ref="loginForm" @submit="onSubmit">
		      <van-field
		        v-model="user.mobile"
		        name="mobile"
		        placeholder="请输入手机号"
		        :rules="userFormRules.mobile"
		        type="number"
		        maxlength="11"
		      >
		        <i slot="left-icon" class="toutiao toutiao-shouji"></i>
		      </van-field>
		      <van-field
		        v-model="user.code"
		        name="code"
		        placeholder="请输入验证码"
		        :rules="userFormRules.code"
		        type="number"
		        maxlength="6"
		      >
		        <i slot="left-icon" class="toutiao toutiao-yanzhengma"></i>
		        <template #button>
		          <!--
		            time: 倒计时时间
		           -->
		          <van-count-down
		            v-if="isCountDownShow"
		            :time="1000 * 60"
		            format="ss s"
		            @finish="isCountDownShow = false"
		          />
		          <van-button
		            v-else
		            class="send-sms-btn"
		            native-type="button"
		            round
		            size="small"
		            type="default"
		            @click="onSendSms"
		          >发送验证码</van-button>
		        </template>
		      </van-field>
		      <div class="login-btn-wrap">
		        <van-button class="login-btn" block type="info" native-type="submit">
		          登录
		        </van-button>
		      </div>
		    </van-form>
		    <!-- /登录表单 -->
		  </div>
		</template>

		<script>
		import { login, sendSms } from '@/api/user'

		export default {
		  name: 'LoginIndex',
		  components: {},
		  props: {},
		  data () {
		    return {
		      user: {
		        mobile: '13911111111', // 手机号
		        code: '246810' // 验证码
		      },
		      userFormRules: {
		        mobile: [{
		          required: true,
		          message: '手机号不能为空'
		        }, {
		          pattern: /^1[3|5|7|8]\d{9}$/,
		          message: '手机号格式错误'
		        }],
		        code: [{
		          required: true,
		          message: '验证码不能为空'
		        }, {
		          pattern: /^\d{6}$/,
		          message: '验证码格式错误'
		        }]
		      },
		      isCountDownShow: false // 是否展示倒计时
		    }
		  },
		  computed: {},
		  watch: {},
		  created () {},
		  mounted () {},
		  methods: {
		    async onSubmit () {
		      // 1. 展示登陆中 loading
		      this.$toast.loading({
		        message: '登录中...',
		        forbidClick: true, // 禁用背景点击
		        duration: 0 // 持续时间，默认 2000，0 表示持续展示不关闭
		      })

		      // 2. 请求登录
		      try {
		        const { data } = await login(this.user)
		        this.$store.commit('setUser', data.data)
		        this.$toast.success('登录成功')

		        // 登录成功，跳转回原来页面
		        // back 的方式不严谨，后面讲功能优化的时候再说
		        this.$router.back()
		      } catch (err) {
		        if (err.response.status === 400) {
		          this.$toast.fail('手机号或验证码错误')
		        } else {
		          this.$toast.fail('登录失败，请稍后重试')
		        }
		      }
		    },

		    async onSendSms () {
		      // 1. 校验手机号
		      try {
		        await this.$refs.loginForm.validate('mobile')
		      } catch (err) {
		        return console.log('验证失败', err)
		      }

		      // 2. 验证通过，显示倒计时
		      this.isCountDownShow = true

		      // 3. 请求发送验证码
		      try {
		        await sendSms(this.user.mobile)
		        this.$toast('发送成功')
		      } catch (err) {
		        // 发送失败，关闭倒计时
		        this.isCountDownShow = false
		        if (err.response.status === 429) {
		          this.$toast('发送太频繁了，请稍后重试')
		        } else {
		          this.$toast('发送失败，请稍后重试')
		        }
		      }
		    }
		  }
		}
		</script>

		<style scoped lang="less">
		.login-container {
		  .toutiao {
		    font-size: 37px;
		  }

		  .send-sms-btn {
		    width: 152px;
		    height: 46px;
		    line-height: 46px;
		    background-color: #ededed;
		    font-size: 22px;
		    color: #666;
		  }

		  .login-btn-wrap {
		    padding: 53px 33px;
		    .login-btn {
		      background-color: #6db4fb;
		      border: none;
		    }
		  }
		}
		</style>



		打开  src/styles/index.less

		加入

		.page-nav-bar {
		  background-color: #3296fa;
		  .van-nav-bar__title, .van-icon {
		    color: #fff;
		  }
		}




          npm  run  serve


          http://localhost:8080/#/login

          







